[
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "Originally termed International Algebraic Language (IAL), ALGOL 58 was an attempt to create a universal programming language.  The Communications of the ACM (CACM) used ALGOL notation to publish algorithms.  ALGOL 58 was rapidly succeeded by ALOGOL 60.\n",
    "examples": [],
    "name": "ALGOL 58",
    "originalAuthors": [
      "John Backus",
      "Friedrich Bauer",
      "Charles Katz",
      "Alan Perlis",
      "Heinz Rutishauser",
      "Klaus Samelson",
      "Joseph Wegstein",
      "Hermann Bottenbruch"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1958
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "The ALGOrithmic Language 1960, a further development upon ALGOL 1958.\n",
    "examples": [],
    "name": "ALGOL 60",
    "originalAuthors": [
      "John Backus",
      "Friedrich Bauer",
      "Julien Green",
      "Charles Katz",
      "John McCarthy",
      "Peter Naur",
      "Alan Perlis",
      "Heinz Rutishauser",
      "Klaus Samelson",
      "Adriaan \"Aad\" van Winjgaarden",
      "Bernard Vauquois",
      "Joseph Wegstein",
      "Michael Woodger"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [
      {
        "title": "ALGOL 60 Report",
        "url": "https://www.masswerk.at/algol60/report.htm"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1960
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "The ALGOrithmic Language 1968, a further development upon ALGOL 1960.\n",
    "examples": [],
    "name": "ALGOL 68",
    "originalAuthors": [
      "Adriaan \"Aad\" van Winjgaarden",
      "Barry Mailloux",
      "John E. L. Peck",
      "Cornelis H. A. Koster"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [
      {
        "title": "ALGOL 68 Genie",
        "url": "https://jmvdveer.home.xs4all.nl/algol.html"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1968
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A Programming Language, originally a math notation, is an language specialized for manipulating multidimensional arrays.\n",
    "examples": [],
    "name": "APL",
    "originalAuthors": [
      "Kenneth Iverson"
    ],
    "paradigms": [
      "declarative",
      "array"
    ],
    "resources": [
      {
        "title": "Dyalog APL",
        "url": "https://www.dyalog.com/"
      },
      {
        "title": "TryAPL",
        "url": "https://tryapl.org/"
      }
    ],
    "typing": [
      "dynamic"
    ],
    "yearFirstPublished": 1966
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A programming language commission by the United States Department of Defense (DoD) to supercede the variety of languages in use at the time.  Originally designed for embedded systems, Ada emphasizes safety and security through strong typing, explicit concurrency, and protected objects.  Ada is named for Ada Lovelace.\n",
    "examples": [],
    "name": "Ada",
    "originalAuthors": [
      "Jean Ichbiah et al"
    ],
    "paradigms": [
      "imperative",
      "objectOriented"
    ],
    "resources": [
      {
        "title": "Ada Information Clearinghouse",
        "url": "https://www.adaic.org/"
      },
      {
        "title": "Learn Ada",
        "url": "https://learn.adacore.com/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1980
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "Generally a notation for machine language, assigning readable names (e.g. \\\"mov\\\") to machine instructors.  Modern assembly languages often feature programmer conveniences such as labels and macros.\n",
    "examples": [],
    "name": "Assembly",
    "originalAuthors": [
      "Kathleen Booth",
      "Andrew Donald Booth"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [],
    "typing": [
      "weak"
    ],
    "yearFirstPublished": 1947
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A simplification of BCPL; predecessor to C.\n",
    "examples": [],
    "name": "B",
    "originalAuthors": [
      "Ken Thompson",
      "Dennis Ritchie"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [],
    "typing": [
      "weak"
    ],
    "yearFirstPublished": 1969
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "Beginner's All-purpose Symbolic Instruction Code (BASIC) was designed to be easy to learn and use. It became widely popular in the home computer era of the 1980s.\n",
    "examples": [],
    "name": "BASIC",
    "originalAuthors": [
      "John G. Kemeny",
      "Thomas E. Kurtz"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [],
    "typing": [
      "dynamic"
    ],
    "yearFirstPublished": 1964
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "Basic Combined Programming Language; a language originally designed to implement compilers in.  BCPL was later simplified into B, which was then developed into the still-widely-used C programming language.\n",
    "examples": [],
    "name": "BCPL",
    "originalAuthors": [
      "Martin Richards"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [
      {
        "title": "BCPL Reference Manual",
        "url": "https://www.cl.cam.ac.uk/~mr10/bcplman.pdf"
      }
    ],
    "typing": [
      "weak"
    ],
    "yearFirstPublished": 1967
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "Originally developed in service of developing the UNIX operating system, C is one of the most influential and widely-used programming languages today.\nC was originally standardized by the ANSI in 1989 (C89), but that standard was later superceded by the ISO in 1990 and since.",
    "examples": [
      "#include <stdio.h>\n\nvoid main() {\n  printf(\"Hello, world!\\n\");\n}\n  "
    ],
    "name": "C",
    "originalAuthors": [
      "Dennis Ritchie"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [
      {
        "title": "C Programming Language Standard",
        "url": "https://www.iso.org/standard/82075.html"
      },
      {
        "title": "Learn C",
        "url": "https://www.learn-c.org/"
      }
    ],
    "typing": [
      "static",
      "weak"
    ],
    "yearFirstPublished": 1972
  },
  {
    "compilationTargets": [
      "cli"
    ],
    "description": "A modern, object-oriented language developed by Microsoft as part of the .NET platform. While initially similar to Java, C# has evolved to incorporate many functional programming features.\n",
    "examples": [],
    "name": "C#",
    "originalAuthors": [
      "Anders Hejlsberg",
      "Scott Wiltamuth",
      "Peter Golde"
    ],
    "paradigms": [
      "objectOriented",
      "imperative",
      "functional",
      "declarative"
    ],
    "resources": [
      {
        "title": "C# Documentation",
        "url": "https://docs.microsoft.com/en-us/dotnet/csharp/"
      },
      {
        "title": "Learn C#",
        "url": "https://dotnet.microsoft.com/learn/csharp"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 2000
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "An extension of C.  Originally the extension was first-class object orientation (the code `c++` in C means \\\"add one to c\\\"), C++ now offers a large number and variety of extensions, including closures, templates, and exceptions.\n",
    "examples": [],
    "name": "C++",
    "originalAuthors": [
      "Bjarne Stroustroup"
    ],
    "paradigms": [
      "imperative",
      "objectOriented"
    ],
    "resources": [
      {
        "title": "C++ Standard",
        "url": "https://isocpp.org/"
      },
      {
        "title": "CPP Reference",
        "url": "https://en.cppreference.com/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1985
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "COmmon Business-Oriented Language, designed for business use.\n",
    "examples": [],
    "name": "COBOL",
    "originalAuthors": [
      "Howard Bromberg",
      "Norman Discount",
      "Vernon Reeves",
      "Jean E. Sammet",
      "William Selden",
      "Gertrude Tierney",
      "Grace Hopper"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [
      {
        "title": "COBOL Documentation",
        "url": "https://www.ibm.com/docs/en/cobol-zos"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1959
  },
  {
    "compilationTargets": [
      "jvmBytecode",
      "javascript"
    ],
    "description": "A modern dialect of Lisp that runs on the Java Virtual Machine, emphasizing functional programming and immutability.\n",
    "examples": [],
    "name": "Clojure",
    "originalAuthors": [
      "Rich Hickey"
    ],
    "paradigms": [
      "functional"
    ],
    "resources": [
      {
        "title": "Clojure Homepage",
        "url": "https://clojure.org/"
      },
      {
        "title": "Clojure Documentation",
        "url": "https://clojure.org/reference/documentation"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 2007
  },
  {
    "compilationTargets": [
      "machineCode",
      "interpreted"
    ],
    "description": "A standardized dialect of Lisp that unified several existing Lisp implementations.  It is a multi-paradigm language featuring a macro system, dynamic typing, and support for multiple programming paradigms.\n",
    "examples": [],
    "name": "Common Lisp",
    "originalAuthors": [
      "Scott Fahlman",
      "Richard P. Gabriel",
      "David A. Moon",
      "Guy L. Steele",
      "Dan Weinreb",
      "Kent Pitman"
    ],
    "paradigms": [
      "functional",
      "imperative",
      "objectOriented"
    ],
    "resources": [
      {
        "title": "Common Lisp HyperSpec",
        "url": "http://www.lispworks.com/documentation/HyperSpec/Front/"
      },
      {
        "title": "Common Lisp Wiki",
        "url": "https://www.cliki.net/"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 1984
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A programming language with Ruby-like syntax that compiles to native code. It aims to provide the productivity of Ruby with the performance and type safety of a compiled language.\n",
    "examples": [
      "puts \"Hello, World!\"\n"
    ],
    "name": "Crystal",
    "originalAuthors": [
      "Ary Borenszweig",
      "Juan Wajnerman",
      "Brian Cardiff"
    ],
    "paradigms": [
      "objectOriented"
    ],
    "resources": [
      {
        "title": "Crystal Homepage",
        "url": "https://crystal-lang.org/"
      },
      {
        "title": "Crystal Documentation",
        "url": "https://crystal-lang.org/reference/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 2014
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A declarative programming language that combines functional programming with logic programming features. Named after Haskell B. Curry, it integrates the most important features of functional languages like Haskell and logic languages like Prolog.\n",
    "examples": [],
    "name": "Curry",
    "originalAuthors": [
      "Michael Hanus"
    ],
    "paradigms": [
      "functional",
      "logic"
    ],
    "resources": [
      {
        "title": "Curry Homepage",
        "url": "http://www.curry-lang.org/"
      },
      {
        "title": "Curry Documentation",
        "url": "http://www.curry-lang.org/documentation/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1999
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A systems programming language intended as an improvement over C++.\n",
    "examples": [],
    "name": "D",
    "originalAuthors": [
      "Walter Bright",
      "Andrei Alexandrescu"
    ],
    "paradigms": [
      "imperative",
      "objectOriented"
    ],
    "resources": [
      {
        "title": "D Language Homepage",
        "url": "https://dlang.org/"
      },
      {
        "title": "D Language Documentation",
        "url": "https://dlang.org/documentation.html"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 2001
  },
  {
    "compilationTargets": [
      "javascript"
    ],
    "description": "A client-optimized programming language developed by Google for building web, mobile, and desktop applications. Originally designed as a replacement for JavaScript, it now focuses on being a general-purpose language with strong tooling support.\n",
    "examples": [],
    "name": "Dart",
    "originalAuthors": [
      "Lars Bak",
      "Kasper Lund"
    ],
    "paradigms": [
      "objectOriented",
      "functional"
    ],
    "resources": [
      {
        "title": "Dart Homepage",
        "url": "https://dart.dev/"
      },
      {
        "title": "Dart Documentation",
        "url": "https://dart.dev/guides"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 2011
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A declarative logic programming language that is a subset of Prolog, but typically uses a bottom-up rather than top-down evaluation style.  It is often used as a query language for deductive databases such as Datomic.\n",
    "examples": [],
    "name": "Datalog",
    "originalAuthors": [
      "Hervé Gallaire",
      "Jack Minker"
    ],
    "paradigms": [
      "logic",
      "declarative"
    ],
    "resources": [
      {
        "title": "Datalog Educational System",
        "url": "http://datalog.sourceforge.net/"
      }
    ],
    "typing": [
      "static"
    ],
    "yearFirstPublished": 1977
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A programmable configuration language that is not Turing complete. Dhall aims to be a standardized configuration language that is guaranteed to terminate and is more expressive than JSON or YAML.\n",
    "examples": [],
    "name": "Dhall",
    "originalAuthors": [
      "Gabriel Gonzalez"
    ],
    "paradigms": [
      "functional",
      "declarative"
    ],
    "resources": [
      {
        "title": "Dhall Homepage",
        "url": "https://dhall-lang.org/"
      },
      {
        "title": "Dhall Documentation",
        "url": "https://docs.dhall-lang.org/"
      },
      {
        "title": "Dhall GitHub",
        "url": "https://github.com/dhall-lang/dhall-lang"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 2017
  },
  {
    "compilationTargets": [
      "beamBytecode"
    ],
    "description": "A functional programming language with Ruby-like syntax that runs on the BEAM (the Erlang virtual machine).\n",
    "examples": [],
    "name": "Elixir",
    "originalAuthors": [
      "José Valim"
    ],
    "paradigms": [
      "functional",
      "declarative"
    ],
    "resources": [
      {
        "title": "Elixir Homepage",
        "url": "https://elixir-lang.org/"
      },
      {
        "title": "Elixir Documentation",
        "url": "https://hexdocs.pm/elixir/"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 2011
  },
  {
    "compilationTargets": [
      "javascript"
    ],
    "description": "A functional programming language that compiles to JavaScript, specifically designed for building web browser-based user interfaces. Elm emphasizes simplicity, ease of use, and no runtime exceptions.\n",
    "examples": [],
    "name": "Elm",
    "originalAuthors": [
      "Evan Czaplicki"
    ],
    "paradigms": [
      "functional"
    ],
    "resources": [
      {
        "title": "Elm Homepage",
        "url": "https://elm-lang.org/"
      },
      {
        "title": "Elm Guide",
        "url": "https://guide.elm-lang.org/"
      },
      {
        "title": "Elm Package Documentation",
        "url": "https://package.elm-lang.org/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 2012
  },
  {
    "compilationTargets": [
      "beamBytecode"
    ],
    "description": "A functional programming language developed at Ericsson, designed for building scalable distributed systems.\n",
    "examples": [],
    "name": "Erlang",
    "originalAuthors": [
      "Joe Armstrong",
      "Robert Virding",
      "Mike Williams"
    ],
    "paradigms": [
      "functional",
      "declarative"
    ],
    "resources": [
      {
        "title": "Erlang Homepage",
        "url": "https://www.erlang.org/"
      },
      {
        "title": "Erlang Documentation",
        "url": "https://www.erlang.org/docs"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 1986
  },
  {
    "compilationTargets": [
      "cli"
    ],
    "description": "A functional-first programming language for the .NET ecosystem.\n",
    "examples": [],
    "name": "F#",
    "originalAuthors": [
      "Don Syme"
    ],
    "paradigms": [
      "functional",
      "objectOriented"
    ],
    "resources": [
      {
        "title": "F# Homepage",
        "url": "https://fsharp.org/"
      },
      {
        "title": "F# Documentation",
        "url": "https://docs.microsoft.com/en-us/dotnet/fsharp/"
      }
    ],
    "typing": [
      "static",
      "strong",
      "inferred"
    ],
    "yearFirstPublished": 2005
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A stack-oriented programming language with high-level features like dynamic typing, extensible syntax, macros, and garbage collection. Factor emphasizes interactive development and concatenative programming.\n",
    "examples": [],
    "name": "Factor",
    "originalAuthors": [
      "Slava Pestov"
    ],
    "paradigms": [
      "functional",
      "declarative",
      "stack"
    ],
    "resources": [
      {
        "title": "Factor Homepage",
        "url": "https://factorcode.org/"
      },
      {
        "title": "Factor Documentation",
        "url": "https://docs.factorcode.org/"
      },
      {
        "title": "Factor GitHub Repository",
        "url": "https://github.com/factor/factor"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 2003
  },
  {
    "compilationTargets": [
      "interpreted",
      "machineCode"
    ],
    "description": "A stack-based programming language emphasizing simplicity and extensibility.\n",
    "examples": [],
    "name": "Forth",
    "originalAuthors": [
      "Charles H. Moore"
    ],
    "paradigms": [
      "imperative",
      "stack"
    ],
    "resources": [
      {
        "title": "Forth Interest Group",
        "url": "http://www.forth.org/"
      }
    ],
    "typing": [
      "weak"
    ],
    "yearFirstPublished": 1970
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "The first high-level programming language, designed for scientific computing.\n",
    "examples": [],
    "name": "Fortran",
    "originalAuthors": [
      "John Backus"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [
      {
        "title": "Fortran Homepage",
        "url": "https://fortran-lang.org/"
      },
      {
        "title": "Fortran Documentation",
        "url": "https://fortran-lang.org/learn/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1957
  },
  {
    "compilationTargets": [
      "beamBytecode"
    ],
    "description": "A statically typed functional programming language for building scalable concurrent systems that runs on the BEAM.\n",
    "examples": [],
    "name": "Gleam",
    "originalAuthors": [
      "Louis Pilfold"
    ],
    "paradigms": [
      "functional"
    ],
    "resources": [
      {
        "title": "Gleam Homepage",
        "url": "https://gleam.run/"
      },
      {
        "title": "Gleam Documentation",
        "url": "https://gleam.run/documentation/"
      }
    ],
    "typing": [
      "static",
      "strong",
      "inferred"
    ],
    "yearFirstPublished": 2016
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A statically typed, compiled language designed at Google and strongly influenced by C.  However, Go's design more strongly emphasizes simplicity and safety (e.g. Go features garbage collection instead of manual memory management).\n",
    "examples": [],
    "name": "Go",
    "originalAuthors": [
      "Robert Griesemer",
      "Rob Pike",
      "Ken Thompson"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [
      {
        "title": "Go Homepage",
        "url": "https://golang.org/"
      },
      {
        "title": "Go Documentation",
        "url": "https://golang.org/doc/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 2009
  },
  {
    "compilationTargets": [
      "machineCode",
      "javascript",
      "webassembly"
    ],
    "description": "A purely functional programming language with strong static typing and lazy evaluation.\n",
    "examples": [
      "main :: IO ()\nmain = putStrLn \"Hello, World!\"\n"
    ],
    "name": "Haskell",
    "originalAuthors": [
      "Lennart Augustsson",
      "Dave Barton",
      "Brian Boutel",
      "Warren Burton",
      "Joseph Fasel",
      "Kevin Hammond",
      "Ralf Hinze",
      "Paul Hudak",
      "John Hughes",
      "Thomas Johnsson",
      "Mark Jones",
      "Simon Peyton Jones",
      "John Launchbury",
      "Erik Meijer",
      "John Peterson",
      "Alastair Reid",
      "Colin Runciman",
      "Philip Wadler"
    ],
    "paradigms": [
      "functional",
      "declarative"
    ],
    "resources": [
      {
        "title": "Haskell Homepage",
        "url": "https://www.haskell.org/"
      },
      {
        "title": "Haskell Documentation",
        "url": "https://www.haskell.org/documentation/"
      }
    ],
    "typing": [
      "static",
      "strong",
      "inferred"
    ],
    "yearFirstPublished": 1990
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A pure object-oriented programming language inspired by Smalltalk, Self, and Lisp. Everything in Io is a message that is passed to objects. It features a small core with highly dynamic and reflective capabilities.\n",
    "examples": [],
    "name": "Io",
    "originalAuthors": [
      "Steve Dekorte"
    ],
    "paradigms": [
      "objectOriented"
    ],
    "resources": [
      {
        "title": "Io Language",
        "url": "https://iolanguage.org/"
      },
      {
        "title": "Io Guide",
        "url": "https://iolanguage.org/guide/guide.html"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 2002
  },
  {
    "compilationTargets": [
      "jvmBytecode"
    ],
    "description": "A prototype-based, dynamic programming language inspired by Io, Smalltalk, Ruby, and Lisp. It runs on the Java Virtual Machine and emphasizes expressiveness and experimentation.\n",
    "examples": [],
    "name": "Ioke",
    "originalAuthors": [
      "Ola Bini"
    ],
    "paradigms": [
      "objectOriented"
    ],
    "resources": [
      {
        "title": "Ioke Language",
        "url": "https://ioke.org/"
      },
      {
        "title": "Ioke Documentation",
        "url": "https://ioke.org/documentation.html"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 2008
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A successor to APL focusing on array programming.\n",
    "examples": [],
    "name": "J",
    "originalAuthors": [
      "Kenneth E. Iverson",
      "Roger Hui"
    ],
    "paradigms": [
      "array",
      "declarative",
      "functional"
    ],
    "resources": [
      {
        "title": "J Homepage",
        "url": "https://www.jsoftware.com/"
      },
      {
        "title": "J Documentation",
        "url": "https://code.jsoftware.com/wiki/Main_Page"
      }
    ],
    "typing": [
      "dynamic"
    ],
    "yearFirstPublished": 1990
  },
  {
    "compilationTargets": [
      "jvmBytecode"
    ],
    "description": "A class-based, object-oriented programming language designed to be 'write once, run anywhere' via the Java Virtual Machine.\n",
    "examples": [],
    "name": "Java",
    "originalAuthors": [
      "James Gosling"
    ],
    "paradigms": [
      "objectOriented",
      "imperative"
    ],
    "resources": [
      {
        "title": "Java Homepage",
        "url": "https://www.java.com/"
      },
      {
        "title": "Java Documentation",
        "url": "https://docs.oracle.com/en/java/"
      }
    ],
    "typing": [
      "static",
      "strong",
      "nominal"
    ],
    "yearFirstPublished": 1995
  },
  {
    "compilationTargets": [
      "javascript"
    ],
    "description": "A high-level, multi-paradigm programming language that powers most interactive websites. Originally created for Netscape Navigator, it has since become the de facto language of the web.\n",
    "examples": [
      "console.log(\"Hello, World!\");\n"
    ],
    "name": "JavaScript",
    "originalAuthors": [
      "Brendan Eich"
    ],
    "paradigms": [
      "imperative",
      "functional",
      "objectOriented"
    ],
    "resources": [
      {
        "title": "MDN JavaScript Guide",
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide"
      },
      {
        "title": "ECMAScript Specification",
        "url": "https://www.ecma-international.org/publications-and-standards/standards/ecma-262/"
      }
    ],
    "typing": [
      "dynamic",
      "weak"
    ],
    "yearFirstPublished": 1995
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "An array programming language used primarily in financial applications.\n",
    "examples": [],
    "name": "K",
    "originalAuthors": [
      "Arthur Whitney"
    ],
    "paradigms": [
      "array",
      "declarative"
    ],
    "resources": [
      {
        "title": "Kx Systems",
        "url": "https://kx.com/"
      }
    ],
    "typing": [
      "dynamic"
    ],
    "yearFirstPublished": 1993
  },
  {
    "compilationTargets": [
      "jvmBytecode",
      "javascript"
    ],
    "description": "A modern programming language targeting the JVM, Android, and web browsers (via compilation to JavaScript).\n",
    "examples": [],
    "name": "Kotlin",
    "originalAuthors": [
      "JetBrains Team"
    ],
    "paradigms": [
      "objectOriented",
      "functional",
      "imperative",
      "declarative"
    ],
    "resources": [
      {
        "title": "Kotlin Homepage",
        "url": "https://kotlinlang.org/"
      },
      {
        "title": "Kotlin Documentation",
        "url": "https://kotlinlang.org/docs/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 2011
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A lightweight, high-level scripting language designed primarily for embedded use in applications. Known for its efficiency, portability, and ease of integration.\n",
    "examples": [],
    "name": "Lua",
    "originalAuthors": [
      "Roberto Ierusalimschy",
      "Waldemar Celes",
      "Luiz Henrique de Figueiredo"
    ],
    "paradigms": [
      "imperative",
      "functional"
    ],
    "resources": [
      {
        "title": "Lua Homepage",
        "url": "https://www.lua.org/"
      },
      {
        "title": "Lua Documentation",
        "url": "https://www.lua.org/docs.html"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 1993
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "Originally \\\"MATrix LABoratory\\\", MATLAB is a closed-source numerical computing environment and programming language.\n",
    "examples": [],
    "name": "MATLAB",
    "originalAuthors": [
      "Cleve Moler"
    ],
    "paradigms": [
      "array",
      "imperative"
    ],
    "resources": [
      {
        "title": "MATLAB Homepage",
        "url": "https://www.mathworks.com/products/matlab.html"
      },
      {
        "title": "MATLAB Documentation",
        "url": "https://www.mathworks.com/help/matlab/"
      }
    ],
    "typing": [
      "dynamic"
    ],
    "yearFirstPublished": 1984
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A dynamic object-oriented programming language originally developed by Smallworld for developing geographical information systems (GIS). Features multiple inheritance, dynamic typing, and garbage collection.\n",
    "examples": [],
    "name": "Magik",
    "originalAuthors": [
      "Arthur Chance"
    ],
    "paradigms": [
      "objectOriented"
    ],
    "resources": [
      {
        "title": "Magik Development Tools (MDT)",
        "url": "https://mdt.net"
      },
      {
        "title": "Visual Studio Code Extension",
        "url": "https://marketplace.visualstudio.com/items?itemName=siamz.smallworld-magik"
      }
    ],
    "typing": [
      "dynamic"
    ],
    "yearFirstPublished": 1990
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A pure logic programming language that combines the clarity and expressiveness of declarative programming with advanced static analysis and error detection features. Mercury improves upon Prolog with a strong type system, mode system, and determinism analysis.\n",
    "examples": [],
    "name": "Mercury",
    "originalAuthors": [
      "Zoltan Somogyi",
      "Ralph Becket",
      "Peter Ross"
    ],
    "paradigms": [
      "functional",
      "logic"
    ],
    "resources": [
      {
        "title": "Mercury Homepage",
        "url": "https://mercurylang.org/"
      },
      {
        "title": "Mercury Documentation",
        "url": "https://mercurylang.org/documentation/documentation.html"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1995
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A successor to Pascal emphasizing modularity, wherein groups of related declarations are grouped into modules.\n",
    "examples": [],
    "name": "Modula",
    "originalAuthors": [
      "Niklaus Wirth"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1975
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A successor to Modula with improved type safety and module system. Modula-2 added support for separate compilation, co-routines for concurrent programming, and a more sophisticated module system. It influenced later languages like Ada and Oberon.\n",
    "examples": [],
    "name": "Modula-2",
    "originalAuthors": [
      "Niklaus Wirth"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [
      {
        "title": "ADW Modula-2 Homepage",
        "url": "http://www.modula2.org/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1978
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "Formerly Objective Caml, OCaml is a general-purpose programming language that supports functional, imperative, and object-oriented programming styles. OCaml emphasizes type safety and expressiveness while maintaining high performance through native code compilation.\n",
    "examples": [],
    "name": "OCaml",
    "originalAuthors": [
      "Xavier Leroy",
      "Jérôme Vouillon",
      "Damien Doligez",
      "Didier Rémy",
      "Ascánder Suárez"
    ],
    "paradigms": [
      "functional",
      "imperative",
      "objectOriented"
    ],
    "resources": [
      {
        "title": "OCaml Homepage",
        "url": "https://ocaml.org/"
      },
      {
        "title": "OCaml Documentation",
        "url": "https://ocaml.org/docs/"
      },
      {
        "title": "Real World OCaml (book)",
        "url": "https://dev.realworldocaml.org/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1996
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A successor to Modula-2 that introduced object-oriented features while maintaining simplicity and efficiency. It was designed alongside the Oberon operating system.\n",
    "examples": [],
    "name": "Oberon",
    "originalAuthors": [
      "Niklaus Wirth"
    ],
    "paradigms": [
      "imperative",
      "objectOriented"
    ],
    "resources": [
      {
        "title": "ETH Oberon",
        "url": "https://www.inf.ethz.ch/personal/wirth/Oberon/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1987
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A high-level language, primarily used for numerical computations.  Octave is a free and open-source alternative to MATLAB.\n",
    "examples": [],
    "name": "Octave",
    "originalAuthors": [
      "John W. Eaton"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [
      {
        "title": "GNU Octave",
        "url": "https://www.gnu.org/software/octave/"
      },
      {
        "title": "Octave Documentation",
        "url": "https://octave.org/doc/interpreter/"
      }
    ],
    "typing": [
      "dynamic"
    ],
    "yearFirstPublished": 1992
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A server-side scripting language originally designed for web development. PHP originally stood for \\\"Personal Home Page\\\" but was later renamed to \\\"PHP: Hypertext Preprocessor\\\".\n",
    "examples": [],
    "name": "PHP",
    "originalAuthors": [
      "Rasmus Lerdorf"
    ],
    "paradigms": [
      "imperative",
      "objectOriented"
    ],
    "resources": [
      {
        "title": "PHP Homepage",
        "url": "https://www.php.net/"
      },
      {
        "title": "PHP Documentation",
        "url": "https://www.php.net/docs.php"
      }
    ],
    "typing": [
      "dynamic",
      "weak"
    ],
    "yearFirstPublished": 1995
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "Programming Language One, designed by IBM and its user group, SHARE, to succeed FORTRAN and COBOL.\n",
    "examples": [],
    "name": "PL/I",
    "originalAuthors": [
      "IBM"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [],
    "typing": [
      "static"
    ],
    "yearFirstPublished": 1964
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A language designed to encourage good programming practices.  Wirth's efforts were originally part of the effort to design the next version of ALGOL (the ALGOL X effort), but Wirth's proposals were not accepted, so he created Pascal instead.  Pascal was very popular in the 1970s and 1980s, but has since been largely supplanted by C and C++.\n",
    "examples": [],
    "name": "Pascal",
    "originalAuthors": [
      "Niklaus Wirth"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [
      {
        "title": "Wikipedia: Pascal",
        "url": "https://en.wikipedia.org/wiki/Pascal_(programming_language)"
      },
      {
        "title": "Free Pascal (a Pascal compiler)",
        "url": "https://www.freepascal.org/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1970
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A general-purpose language originally designed for text processing.  Perl is known for its flexibility and its ability to easily create domain-specific languages.\n",
    "examples": [],
    "name": "Perl",
    "originalAuthors": [
      "Larry Wall"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [
      {
        "title": "Perl Homepage",
        "url": "https://www.perl.org/"
      },
      {
        "title": "Perl Documentation",
        "url": "https://perldoc.perl.org/"
      }
    ],
    "typing": [
      "dynamic"
    ],
    "yearFirstPublished": 1987
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "An object-oriented programming language designed for writing safe, high-performance actor-based programs. Pony emphasizes capabilities-secure type system and data-race freedom through its reference capabilities system.\n",
    "examples": [],
    "name": "Pony",
    "originalAuthors": [
      "Sebastian Blessing",
      "Sylvan Clebsch"
    ],
    "paradigms": [
      "objectOriented",
      "functional"
    ],
    "resources": [
      {
        "title": "Pony Homepage",
        "url": "https://www.ponylang.io/"
      },
      {
        "title": "Pony Tutorial",
        "url": "https://tutorial.ponylang.io/"
      },
      {
        "title": "Pony Documentation",
        "url": "https://www.ponylang.io/learn/"
      }
    ],
    "typing": [
      "static",
      "strong",
      "nominal"
    ],
    "yearFirstPublished": 2015
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A logic programming language based on first-order predicate calculus. Programs consist of facts and rules, and computation proceeds by making logical queries against this knowledge base.\n",
    "examples": [],
    "name": "Prolog",
    "originalAuthors": [
      "Alain Colmerauer",
      "Philippe Roussel"
    ],
    "paradigms": [
      "logic",
      "declarative"
    ],
    "resources": [
      {
        "title": "SWI-Prolog (a Prolog implementation)",
        "url": "https://swi-prolog.org"
      },
      {
        "title": "Prolog Tutorial",
        "url": "https://www.swi-prolog.org/pldoc/man?section=quickstart"
      },
      {
        "title": "GNU Prolog (a Prolog implementation)",
        "url": "http://gprolog.org/"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 1972
  },
  {
    "compilationTargets": [
      "javascript"
    ],
    "description": "A strongly-typed functional programming language that compiles to JavaScript. PureScript is similar to Haskell but designed specifically for the web platform, featuring row polymorphism, type classes, and strict evaluation.\n",
    "examples": [],
    "name": "PureScript",
    "originalAuthors": [
      "Phil Freeman"
    ],
    "paradigms": [
      "functional"
    ],
    "resources": [
      {
        "title": "PureScript Homepage",
        "url": "https://www.purescript.org/"
      },
      {
        "title": "PureScript Documentation",
        "url": "https://github.com/purescript/documentation"
      },
      {
        "title": "Try PureScript",
        "url": "https://try.purescript.org/"
      }
    ],
    "typing": [
      "static",
      "strong",
      "inferred"
    ],
    "yearFirstPublished": 2013
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A programming language designed for teaching computer science, featuring built-in testing, tables, and image manipulation. Pyret emphasizes clear error messages and integrates features from both functional and object-oriented programming.\n",
    "examples": [],
    "name": "Pyret",
    "originalAuthors": [
      "Joe Gibbs Politz",
      "Benjamin Lerner",
      "Daniel Patterson",
      "Dorai Sitaram"
    ],
    "paradigms": [
      "functional"
    ],
    "resources": [
      {
        "title": "Pyret Homepage",
        "url": "https://www.pyret.org/"
      },
      {
        "title": "Pyret Documentation",
        "url": "https://www.pyret.org/docs/"
      },
      {
        "title": "Online Editor",
        "url": "https://code.pyret.org/"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 2012
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A high-level, general-purpose programming language emphasizing code readability with its notable use of significant whitespace. Python supports multiple programming paradigms and features a comprehensive (frequently referred to as \\\"batteries-included\\\") standard library.\n",
    "examples": [
      "print(\"Hello, World!\")"
    ],
    "name": "Python",
    "originalAuthors": [
      "Guido van Rossum"
    ],
    "paradigms": [
      "imperative",
      "objectOriented",
      "functional"
    ],
    "resources": [
      {
        "title": "Python Homepage",
        "url": "https://www.python.org/"
      },
      {
        "title": "Python Documentation",
        "url": "https://docs.python.org/"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 1991
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "An IDE and interpreter for a version of BASIC developed by Microsoft. It was included with MS-DOS and was many programmers' first introduction to programming.\n",
    "examples": [],
    "name": "QBasic",
    "originalAuthors": [
      "Microsoft"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [
      {
        "title": "QB64 (a modern implementation of QBASIC)",
        "url": "https://qb64.com/"
      }
    ],
    "typing": [
      "dynamic"
    ],
    "yearFirstPublished": 1991
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A language for statistical computing and data visualization.\n",
    "examples": [],
    "name": "R",
    "originalAuthors": [
      "Ross Ihaka",
      "Robert Gentleman"
    ],
    "paradigms": [
      "functional"
    ],
    "resources": [
      {
        "title": "R Homepage",
        "url": "https://www.r-project.org/"
      },
      {
        "title": "R Documentation",
        "url": "https://www.rdocumentation.org/"
      }
    ],
    "typing": [
      "dynamic"
    ],
    "yearFirstPublished": 1993
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A general-purpose, multi-paradigm programming language in the Lisp/Scheme family. Racket is designed to be a platform for programming language design, implementation, and learning.\n",
    "examples": [],
    "name": "Racket",
    "originalAuthors": [
      "Mathias Felleisen",
      "Matthew Flatt",
      "Robert Bruce Findler",
      "Shriram Krishnamurthi",
      "PLT Inc."
    ],
    "paradigms": [
      "functional",
      "objectOriented"
    ],
    "resources": [
      {
        "title": "Racket Homepage",
        "url": "https://racket-lang.org"
      },
      {
        "title": "Racket Documentation",
        "url": "https://docs.racket-lang.org"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 1995
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A multi-paradigm language formerly known as Perl 6, designed to be more consistent and modern than Perl 5.\n",
    "examples": [],
    "name": "Raku",
    "originalAuthors": [
      "Larry Wall"
    ],
    "paradigms": [
      "objectOriented",
      "functional"
    ],
    "resources": [
      {
        "title": "Raku Homepage",
        "url": "https://raku.org"
      },
      {
        "title": "Raku Documentation",
        "url": "https://docs.raku.org/"
      }
    ],
    "typing": [
      "dynamic",
      "gradual",
      "strong"
    ],
    "yearFirstPublished": 2015
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A lightweight messaging language designed for distributed computing and network communications, with a focus on human-readable syntax.  Sassenrath claims its greatest strength is its ability to easily create domain-specific languages.\n",
    "examples": [],
    "name": "Rebol",
    "originalAuthors": [
      "Carl Sassenrath"
    ],
    "paradigms": [
      "functional",
      "imperative"
    ],
    "resources": [
      {
        "title": "Rebol Homepage",
        "url": "https://www.rebol.com"
      },
      {
        "title": "Rebol Documentation",
        "url": "https://www.rebol.com/docs.html"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 1997
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A next-generation programming language strongly inspired by Rebol but with a focus on cross-compilation, concurrency and high performance.\n",
    "examples": [],
    "name": "Red",
    "originalAuthors": [
      "Nenad Rakočević"
    ],
    "paradigms": [
      "functional",
      "imperative"
    ],
    "resources": [
      {
        "title": "Red Homepage",
        "url": "https://www.red-lang.org"
      },
      {
        "title": "Red Documentation",
        "url": "https://docs.red-lang.org"
      },
      {
        "title": "GitHub Repository",
        "url": "https://github.com/red/red"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 2011
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A dynamic, object-oriented language emphasizing simplicity and productivity.\n",
    "examples": [
      "puts \"Hello World!\""
    ],
    "name": "Ruby",
    "originalAuthors": [
      "Yukihiro \"Matz\" Matsumoto"
    ],
    "paradigms": [
      "imperative",
      "objectOriented"
    ],
    "resources": [
      {
        "title": "Ruby Homepage",
        "url": "https://ruby-lang.org"
      },
      {
        "title": "Ruby Documentation",
        "url": "https://www.ruby-lang.org/en/documentation/"
      },
      {
        "title": "Try Ruby (browser REPL)",
        "url": "https://try.ruby-lang.org/"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 1995
  },
  {
    "compilationTargets": [
      "machineCode",
      "webassembly"
    ],
    "description": "A systems programming language focused on safety, concurrency, and performance, originally developed at Mozilla.  Rust is notable for its compile-time memory safety guarantees through a unique ownership system.\n",
    "examples": [],
    "name": "Rust",
    "originalAuthors": [
      "Graydon Hoare"
    ],
    "paradigms": [
      "imperative",
      "functional"
    ],
    "resources": [
      {
        "title": "Rust Homepage",
        "url": "https://www.rust-lang.org/"
      },
      {
        "title": "Rust Documentation",
        "url": "https://doc.rust-lang.org/"
      },
      {
        "title": "The Rust Programming Language (book)",
        "url": "https://doc.rust-lang.org/book/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 2012
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "StriNg Oriented symBOlic Language, designed for text processing.  SNOBOL had support for \\\"patterns\\\", which were more powerful than regular expressions.  SNOBOL was used for text processing in the 1960s and 1970s, but was largely supplanted by Perl and AWK.\n",
    "examples": [],
    "name": "SNOBOL",
    "originalAuthors": [
      "Ralph Griswold",
      "Ivan Polonsky",
      "David Farber"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [
      {
        "title": "Wikipedia: SNOBOL",
        "url": "https://en.wikipedia.org/wiki/SNOBOL"
      }
    ],
    "typing": [
      "dynamic"
    ],
    "yearFirstPublished": 1962
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "Structured Query Language, a domain-specific language designed for managing and querying relational databases. It has become the standard language for relational database management systems, used in PostgreSQL, MySQL, Oracle, and other database systems.\n",
    "examples": [],
    "name": "SQL",
    "originalAuthors": [
      "Donald D. Chamberlin",
      "Raymond F. Boyce"
    ],
    "paradigms": [
      "declarative"
    ],
    "resources": [
      {
        "title": "SQL Standard",
        "url": "https://www.iso.org/standard/76583.html"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1974
  },
  {
    "compilationTargets": [
      "jvmBytecode",
      "javascript"
    ],
    "description": "A language combining object-oriented and functional programming running on the JVM.\n",
    "examples": [],
    "name": "Scala",
    "originalAuthors": [
      "Martin Odersky"
    ],
    "paradigms": [
      "functional",
      "objectOriented"
    ],
    "resources": [
      {
        "title": "Scala Homepage",
        "url": "https://www.scala-lang.org/"
      },
      {
        "title": "Scala Documentation",
        "url": "https://docs.scala-lang.org/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 2004
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A dialect of Lisp emphasizing simplicity and minimalism, widely used in computer science education and research.\n",
    "examples": [],
    "name": "Scheme",
    "originalAuthors": [
      "Guy L. Steele",
      "Gerald Jay Sussman"
    ],
    "paradigms": [
      "functional"
    ],
    "resources": [
      {
        "title": "Wikipedia: Scheme (programming language)",
        "url": "https://en.wikipedia.org/wiki/Scheme_(programming_language)"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 1975
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "A prototype-based object-oriented programming language that pioneered many concepts used in modern languages like JavaScript.\n",
    "examples": [],
    "name": "Self",
    "originalAuthors": [
      "David Ungar",
      "Randall Smith"
    ],
    "paradigms": [
      "objectOriented"
    ],
    "resources": [
      {
        "title": "Wikipedia: Self (programming language)",
        "url": "https://en.wikipedia.org/wiki/Self_(programming_language)"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 1987
  },
  {
    "compilationTargets": [
      "interpreted"
    ],
    "description": "One of the first pure object-oriented programming languages.\n",
    "examples": [],
    "name": "Smalltalk",
    "originalAuthors": [
      "Dan Ingalls",
      "Alan Kay",
      "Adele Goldberg",
      "Ted Kaehler",
      "Diana Merry",
      "Scott Wallace"
    ],
    "paradigms": [
      "objectOriented"
    ],
    "resources": [
      {
        "title": "Squeak Homepage (Smalltalk Implementation)",
        "url": "https://squeak.org/"
      },
      {
        "title": "Pharo Homepage (Smalltalk Implementation)",
        "url": "https://pharo.org/"
      }
    ],
    "typing": [
      "dynamic",
      "strong"
    ],
    "yearFirstPublished": 1972
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "The first object-oriented programming language.\n",
    "examples": [],
    "name": "Simula",
    "originalAuthors": [
      "Ole-Johan Dahl",
      "Kristen Nygaard"
    ],
    "paradigms": [
      "objectOriented"
    ],
    "resources": [
      {
        "title": "Wikipedia: Simula",
        "url": "https://en.wikipedia.org/wiki/Simula"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1965
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "An attempt to \\\"standardize\\\" ML implementations, Standard ML (SML) is a general-purpose functional programming language that features static typing, type inference, pattern matching, and a sophisticated module system. SML influenced many modern functional languages including OCaml, F#, and Scala.\n",
    "examples": [],
    "name": "Standard ML (SML)",
    "originalAuthors": [
      "Robin Milner",
      "Mads Tofte",
      "Robert Harper"
    ],
    "paradigms": [
      "imperative",
      "functional"
    ],
    "resources": [
      {
        "title": "Standard ML Family GitHub",
        "url": "https://smlfamily.github.io/"
      },
      {
        "title": "SML/NJ (a compiler for SML)",
        "url": "https://www.smlnj.org/"
      },
      {
        "title": "MLton (a compiler for SML)",
        "url": "http://mlton.org/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 1983
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A modern programming language developed by Apple as a replacement for Objective-C.  Swift is primarily used to create apps for iOS, macOS, and other Apple operating systems.\n",
    "examples": [],
    "name": "Swift",
    "originalAuthors": [
      "Chris Lattner",
      "Doug Gregor",
      "John McCall",
      "Ted Kremenek",
      "Joe Groff"
    ],
    "paradigms": [
      "objectOriented",
      "functional"
    ],
    "resources": [
      {
        "title": "Swift Homepage",
        "url": "https://www.swift.org/"
      },
      {
        "title": "Swift Documentation",
        "url": "https://docs.swift.org/"
      },
      {
        "title": "The Swift Programming Language (book)",
        "url": "https://docs.swift.org/swift-book/documentation/the-swift-programming-language/"
      },
      {
        "title": "Apple Documentation",
        "url": "https://developer.apple.com/swift/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 2014
  },
  {
    "compilationTargets": [
      "javascript"
    ],
    "description": "A strict syntactical superset of JavaScript that adds optional static typing. Developed by Microsoft to enable JavaScript development at scale.\n",
    "examples": [],
    "name": "TypeScript",
    "originalAuthors": [
      "Anders Hejlsberg"
    ],
    "paradigms": [
      "objectOriented",
      "functional",
      "imperative"
    ],
    "resources": [
      {
        "title": "TypeScript Homepage",
        "url": "https://www.typescriptlang.org/"
      },
      {
        "title": "TypeScript Documentation",
        "url": "https://www.typescriptlang.org/docs/"
      },
      {
        "title": "The TypeScript Handbook",
        "url": "https://www.typescriptlang.org/docs/handbook/intro.html"
      }
    ],
    "typing": [
      "static",
      "strong",
      "structural"
    ],
    "yearFirstPublished": 2012
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A systems programming language, very similar to Go.  V emphasizes safety, performance, and simplicity with fast compilation, memory safety without garbage collection, and C-style syntax.\n",
    "examples": [],
    "name": "V",
    "originalAuthors": [
      "Alexander Medvednikov"
    ],
    "paradigms": [
      "imperative"
    ],
    "resources": [
      {
        "title": "V Programming Language",
        "url": "https://vlang.io/"
      },
      {
        "title": "V Documentation",
        "url": "https://docs.vlang.io/"
      },
      {
        "title": "V GitHub Repository",
        "url": "https://github.com/vlang/v"
      },
      {
        "title": "V Playground (online editor)",
        "url": "https://play.vlang.io/"
      }
    ],
    "typing": [
      "static",
      "strong"
    ],
    "yearFirstPublished": 2019
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A version of BASIC developed by Microsoft for its COM programming model and Windows GUI development. Later evolved into Visual Basic .NET.\n",
    "examples": [],
    "name": "Visual Basic",
    "originalAuthors": [
      "Microsoft"
    ],
    "paradigms": [
      "imperative",
      "objectOriented"
    ],
    "resources": [
      {
        "title": "Visual Basic Documentation",
        "url": "https://learn.microsoft.com/en-us/dotnet/visual-basic/"
      }
    ],
    "typing": [
      "static"
    ],
    "yearFirstPublished": 1991
  },
  {
    "compilationTargets": [
      "machineCode"
    ],
    "description": "A general-purpose programming language with an emphasis on being explicit. To this end, Zig makes features that are usually implicit, such as memory allocations, explicit. Zig supports incremental adoption into C/C++ codebases.\n",
    "examples": [],
    "name": "Zig",
    "originalAuthors": [
      "Andrew Kelley"
    ],
    "paradigms": [
      "imperative",
      "functional"
    ],
    "resources": [
      {
        "title": "Zig Homepage",
        "url": "https://ziglang.org"
      },
      {
        "title": "Compiler repository",
        "url": "https://github.com/ziglang/zig"
      }
    ],
    "typing": [
      "static",
      "strong",
      "inferred"
    ],
    "yearFirstPublished": 2016
  }
]
